// Generated by CoffeeScript 1.6.3
(function() {
  var Glow;

  Glow = (function() {
    function Glow($parent) {
      this.$parent = $parent;
      this.$code = $parent.find('.code');
      this.preview_size = [8, 8];
      this.editor_size = [64, 8];
      this.delay = 90;
      this.cur_col = 0;
      this.$play_pause_btn = $parent.find('.play-pause');
      this.pattern = [];
      this.preview = [];
      this.build();
      this.bind();
      this.updateCode();
      this.play();
    }

    Glow.prototype.build = function() {
      this.buildGrid(this.$parent.find('.grid.editor'), this.pattern, this.editor_size);
      return this.buildGrid(this.$parent.find('.grid.preview'), this.preview, this.preview_size);
    };

    Glow.prototype.bind = function() {
      var self;
      self = this;
      $('.play-pause').click(function() {
        return self.togglePreview();
      });
      return $('.editor .led').click(function() {
        return self.togglePatternLed(this);
      });
    };

    Glow.prototype.buildGrid = function($grid, data, coords) {
      var row, x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = coords[1]; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        row = this.buildDiv('row');
        $grid.append(row);
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = coords[0]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            if (data.length - 1 < x) {
              data.push([]);
            }
            if (data[x].length - 1 < y) {
              data[x].push(0);
            }
            _results1.push(row.append(this.buildDiv('cell').addClass('coord-' + x + '-' + y).append(this.buildDiv('led'))));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Glow.prototype.buildDiv = function(klass) {
      return $('<div class="' + klass + '"></div>');
    };

    Glow.prototype.togglePatternLed = function(led) {
      var $led, coord_xy, x, y;
      $led = $(led);
      coord_xy = $led.parent('.cell').attr('class').match(/coord-(\d+)-(\d+)/i);
      x = parseInt(coord_xy[1]);
      y = parseInt(coord_xy[2]);
      $led.toggleClass('on');
      this.pattern[x][y] = $led.is('.on');
      return this.updateCode();
    };

    Glow.prototype.updateCode = function() {
      var code, rows, x, y, _i, _j, _ref, _ref1;
      this.$parent.find('#x-size').val(this.pattern.length);
      this.$parent.find('#y-size').val(this.pattern[0].length);
      code = '';
      rows = [];
      debugger;
      for (y = _i = 0, _ref = this.pattern[0].length; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        rows.push([]);
        for (x = _j = 0, _ref1 = this.pattern.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          rows[y][x] = this.pattern[x][y] ? 1 : 0;
        }
        rows[y] = rows[y].join(',');
      }
      code = rows.join('\n');
      return this.$code.val(code);
    };

    Glow.prototype.togglePreview = function() {
      if (this.interval) {
        return this.pause();
      } else {
        return this.play();
      }
    };

    Glow.prototype.pause = function() {
      if (!this.interval) {
        return;
      }
      clearInterval(this.interval);
      this.interval = null;
      this.$play_pause_btn.text('play');
      return this.$play_pause_btn.addClass('running');
    };

    Glow.prototype.play = function() {
      var self;
      if (this.interval) {
        return;
      }
      self = this;
      this.$play_pause_btn.text('pause');
      this.$play_pause_btn.removeClass('running');
      return this.interval = setInterval(function() {
        return self.render();
      }, this.delay);
    };

    Glow.prototype.render = function() {
      var $led, x, y, _i, _ref, _results;
      this.cur_col = (this.cur_col + 1) % this.pattern.length;
      this.$play_pause_btn.toggleClass('.on');
      _results = [];
      for (y = _i = 0, _ref = this.preview_size[1]; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.preview_size[0]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            $led = $('.preview .cell.coord-' + x + '-' + y).find('.led');
            if (this.pattern[(this.cur_col + x) % this.pattern.length][y]) {
              if ($led.is(':not(.on)')) {
                _results1.push($led.addClass('on'));
              } else {
                _results1.push(void 0);
              }
            } else {
              if ($led.is('.on')) {
                _results1.push($led.removeClass('on'));
              } else {
                _results1.push(void 0);
              }
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Glow;

  })();

  $(function() {
    return new Glow($('.glowtainer'));
  });

}).call(this);
